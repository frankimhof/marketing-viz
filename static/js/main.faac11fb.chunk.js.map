{"version":3,"sources":["Plot/Utils.tsx","useFetch.tsx","Plot/Ticks.tsx","Plot/Axis.tsx","Plot/GridLine.tsx","Plot/Pattern.tsx","Plot/BarPlot.tsx","Plot/Legend.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["width","height","marginLeft","marginRight","marginTop","marginBottom","useFetch","url","_useState","useState","undefined","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","dataFromResponse","wrap","_context","prev","next","fetch","sent","json","t0","finish","stop","_x","apply","this","arguments","fetchData","stringParser","d3","Ticks","ticks","axis","tickFontSize","plotDimensions","scale","lineColor","_ref$lineWidth","lineWidth","boundedHeight","myFormat","thousands","decimal","grouping","currency","interval","every","map","value","offset","react_default","createElement","Fragment","_ref2","index","key","transform","concat","y2","stroke","strokeWidth","textAnchor","dominantBaseline","style","fontSize","fill","transformOrigin","parseInt","slice","_ref3","x2","format","AxisLabel","label","_ref2$labelFontSize","labelFontSize","_ref2$labelColor","labelColor","boundedWidth","Axis","_ref$lineColor","_ref$labelColor","_ref$labelFontSize","_ref$ticksFontSize","ticksFontSize","y1","Axis_AxisLabel","Plot_Ticks","GridLine","degToRadian","deg","Math","PI","diagonalLines","barWidth","barHeight","color","lines","i","tan","push","react","stroke-width","stroke-linecap","checkered","startPoint","sine","paths","firstHalf","period","secondHalf","j","amp","d","circles","cx","cy","r","Pattern","name","clipPath","_ref$color","_ref$intensity","intensity","objectsToRender","patternColor","rgb","darker","formatHex","BarPlot","_ref$isStacked","isStacked","xAccessor","yAccessors","legend","_ref$yGridLine","yGridLine","_ref$barSpacing","barSpacing","_ref$barGroupSpacing","barGroupSpacing","_ref$yAxisLabel","yAxisLabel","_ref$xAxisLabel","xAxisLabel","fontSettings","colorSettings","_ref$showValues","showValues","_ref2$valueFontSize","valueFontSize","yLabelFontSize","xLabelFontSize","xTicksFontSize","yTicksFontSize","_ref3$backgroundColor","backgroundColor","_ref3$valueColor","valueColor","_ref3$gridLineColor","gridLineColor","_ref3$xLabelColor","xLabelColor","_ref3$yLabelColor","yLabelColor","_ref3$xAxisColor","xAxisColor","_ref3$yAxisColor","yAxisColor","biggestExtentAccessor","reduce","accum","curr","current","yScale","domain","range","nice","xScale","entryWidth","numberOfBarsPerGroup","length","className","viewBox","preserveAspectRatio","borderRadius","Plot_GridLine","yAcc","barIndex","topLeftCornerPosition","id","rx","Plot_Pattern","pattern","fontWeight","Plot_Axis","Legend","items","item","display","legendLabel","colors","toConsumableArray","patterns","dateParser","getAvailableAccessors","dataEntry","keys","fKey","accessor","round","totalNumberOfStudents","App","fachrichtung","setFachrichtung","showSettings","setShowSettings","setShowValues","_useState7","_useState8","showAsPercentage","setShowAsPercentage","_useState9","_useState10","setIsStacked","_useState11","_useState12","selectedAccessors","setSelectedAccessors","_useState13","_useState14","availableAccessors","setAvailableAccessors","_useFetch","availableAcc","filter","onClick","padding","flexDirection","justifyContent","x1","strokeLinecap","react_select_esm","onChange","newValue","defaultValue","options","Array","from","Set","Fachrichtung","newValues","isMulti","assign","Plot_Legend","Plot_BarPlot","date","Jahr","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.faac11fb.chunk.js","sourcesContent":["import {PlotDimensions} from './types';\n\nconst createDimensions = (width:number, height: number, marginLeft: number, marginRight: number, marginTop:number, marginBottom: number):PlotDimensions => {\n  return {\n    width,\n    height,\n    marginLeft,\n    marginRight,\n    marginTop,\n    marginBottom,\n    boundedWidth:width-marginLeft-marginRight,\n    boundedHeight:height-marginTop-marginBottom,\n  }\n}\n\nexport {createDimensions};\n","import {useEffect, useState} from 'react';\n\nexport const useFetch = (url: string) => {\n  const [data, setData] = useState<any>(undefined)\n  const [error, setError] = useState<any>(undefined)\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(()=>{\n    const fetchData = async (url:string) =>{\n      try{\n        setIsLoading(true)\n        const response = await fetch(url);\n        const dataFromResponse = await response.json();\n        setData(dataFromResponse)\n      } catch(err){\n        setError(error)\n      } finally{\n        setIsLoading(false)\n      }\n    }\n\n    fetchData(url)\n\n  },[url])\n  return {data, error, isLoading}\n};\n","import React from 'react';\nimport {PlotDimensions, TickType} from './types';\nimport * as d3 from 'd3';\nimport { TimeInterval } from 'd3';\n\nconst stringParser = d3.timeFormat(\"%Y\")\n\ntype TickProps = {\n  plotDimensions: PlotDimensions\n  tickFontSize: number,\n  lineColor: string,\n  axis: \"x\"|\"y\",\n  scale: d3.ScaleLinear<number, number> | d3.ScaleTime<number, number>,\n  lineWidth?: number\n}\n\nconst Ticks: React.FC<TickProps> = ({axis, tickFontSize, plotDimensions, scale, lineColor, lineWidth=1}) =>{\n  const {boundedHeight} = plotDimensions;\n  const myFormat = d3.formatLocale({thousands: \"\\u2009\", decimal: \".\", grouping: [3], currency: [\"Euro\", \"\"] })\n  const interval = d3.timeYear.every(1) as TimeInterval;\n  let ticks:TickType[];\n  if(axis===\"x\"){\n    ticks = (scale as d3.ScaleTime<number,number>).ticks(interval)\n      .map((value)=>({\n        value,\n        offset: scale(value)\n      } as TickType))\n  }\n  else{\n    ticks = (scale as d3.ScaleTime<number,number>).ticks()\n      .map((value)=>({\n        value,\n        offset: scale(value)\n      } as TickType))\n  }\n  return(\n    <>\n      {axis===\"x\" && ticks.map(({value, offset}, index)=>(\n        <g key={index} transform={`translate(${offset}, ${boundedHeight})`}>\n          <line y2={8} stroke={lineColor} strokeWidth={lineWidth}/> \n          <text key={index} textAnchor=\"end\" dominantBaseline=\"middle\" style={{\n            fontSize: tickFontSize,\n            fill: `${lineColor}`,\n            transformOrigin: \"top left\",\n            transform: `translate(0px, 30px) rotate(-40deg)`}}\n          >{stringParser(value as Date)+\"/\"+(parseInt(stringParser(value as Date).slice(-2))+1)}</text>\n        </g>\n      ))}\n      {axis===\"y\" && ticks.map(({value, offset}, index)=>(\n        <g key={index} transform={`translate(0, ${boundedHeight-offset})`}>\n          <line x2={-8} stroke={lineColor} strokeWidth={lineWidth}/> \n          <text key={index} style={{fontSize: tickFontSize, fill: `${lineColor}`, textAnchor:\"end\", transform: \"translate(-10px,2px)\"}}>{myFormat.format(\",\")(value)}</text>\n        </g>\n      ))}\n    </>\n  )\n}\n\nexport default Ticks\n","import React from 'react';\nimport {ColorSettings, FontSettings, PlotDimensions} from './types';\nimport Ticks from './Ticks';\n\ntype AxisType = 'x' | 'y';\n\ntype Props = {\n  axis: AxisType,\n  plotDimensions: PlotDimensions,\n  colorSettings?: ColorSettings,\n  fontSettings?: FontSettings,\n  lineColor: string,\n  labelColor?: string,\n  label?: string,\n  labelFontSize?: number,\n  ticksFontSize?: number,\n  scale?: d3.ScaleLinear<number, number> | d3.ScaleTime<number, number>,\n}\n\ntype AxisLabelProps = {\n  label:string,\n  labelFontSize?:number,\n  labelColor?: string,\n  plotDimensions:PlotDimensions,\n  axis: AxisType,\n}\n\nconst Axis: React.FC<Props> = ({\n    axis,\n    plotDimensions,\n    scale,\n    lineColor=\"#ddd\",\n    labelColor=\"#ddd\",\n    label,\n    labelFontSize=30,\n    ticksFontSize=30,\n  }) => {\n    const {boundedHeight, boundedWidth} = plotDimensions;\n    return (\n      <>\n        <g>\n          {axis===\"x\"?\n            <line y1={boundedHeight} y2={boundedHeight} x2={boundedWidth} stroke={lineColor}/>\n            :\n            <line y2={boundedHeight} stroke={lineColor}/>\n          }\n          {label && <AxisLabel axis={axis} plotDimensions={plotDimensions} label={label} labelColor={labelColor} labelFontSize={labelFontSize}/>}\n          {scale && <Ticks axis={axis} plotDimensions={plotDimensions} scale={scale} lineColor={lineColor} tickFontSize={ticksFontSize}/>}\n        </g>\n      </>\n    )\n}\n\nconst AxisLabel:React.FC<AxisLabelProps> = ({axis, label, labelFontSize=30, labelColor=\"black\", plotDimensions}) => {\n  const {boundedWidth, boundedHeight, marginBottom, marginLeft} = plotDimensions;\n  return (\n  <>\n    {axis===\"y\" &&\n      <g style={{transform:`rotate(-90deg)`}}>\n        <text transform={`translate(${-boundedHeight*0.5}, ${-marginLeft+2*labelFontSize})`} textAnchor={\"middle\"} fontSize={labelFontSize} fill={labelColor}>{label}</text>\n      </g>\n    }\n    {axis===\"x\" &&\n      <g transform={`translate(${boundedWidth*0.5}, ${boundedHeight+marginBottom})`}>\n        <text textAnchor={\"middle\"} fill={labelColor} fontSize={labelFontSize}>{label}</text>\n      </g>\n    }\n  </>\n)}\n\nexport default Axis;\n","import React from 'react';\nimport {PlotDimensions, TickType} from './types';\n\ntype GridLineProps = {\n  plotDimensions: PlotDimensions\n  lineColor?: string,\n  axis: \"x\"|\"y\",\n  scale: d3.ScaleLinear<number, number>,\n}\n\nconst GridLine : React.FC<GridLineProps> = ({axis, plotDimensions, scale, lineColor=\"#eee\"}) =>{\n  const {boundedHeight, boundedWidth} = plotDimensions;\n  \n  const ticks: TickType[] = scale.ticks()\n    .map((value)=>({\n      value,\n      offset: scale(value)\n    } as TickType))\n\n  return(\n    <>\n      {axis===\"x\" && ticks.map(({offset}, index)=>(\n        <g key={index} transform={`translate(${offset}, ${boundedHeight})`}>\n          <line y2={boundedWidth} stroke={lineColor}/> \n        </g>\n      ))}\n      {axis===\"y\" && ticks.map(({offset}, index)=>(\n        <g key={index} transform={`translate(0, ${boundedHeight-offset})`}>\n          <line x2={boundedWidth} stroke={lineColor}/> \n        </g>\n      ))}\n    </>\n  )\n}\n\nexport default GridLine;\n","// @flow \nimport * as React from 'react';\nimport { PatternType } from '../types';\nimport {rgb} from 'd3';\n\ntype Props = {\n  name: PatternType | undefined,\n  barWidth: number,\n  barHeight: number,\n  clipPath: string,\n  color?: string,\n  intensity?: number,\n};\n\nconst Pattern = ({name, barWidth, barHeight, clipPath, color=\"#000\", intensity=2}: Props) => {\n  let objectsToRender:any[]=[];\n  const patternColor = rgb(color).darker(intensity).formatHex()\n  switch(name){\n    case \"diagonal-lines\":\n    objectsToRender = diagonalLines(barWidth, barHeight, patternColor);\n    break;\n    case \"checkered\":\n    objectsToRender = checkered(barWidth, barHeight, patternColor);\n    break;\n    case \"sine\":\n    objectsToRender = sine(barWidth, barHeight, patternColor);\n    break;\n    case \"circles\":\n    objectsToRender = circles(barWidth, barHeight, patternColor);\n    break;\n    default:\n    objectsToRender = [];\n  }\n  return(\n    <g clipPath={clipPath}>\n      {objectsToRender}\n    </g>\n  )\n};\n\nconst degToRadian = (deg:number):number => {\n  return deg*Math.PI/180;\n}\n\nconst diagonalLines = (barWidth:number, barHeight:number, color:string) =>{\n  const angle = 20;\n  const startPoint = Math.tan(degToRadian(angle))*barWidth;\n  let lines = [];\n  for(let i = -startPoint; i<barHeight; i+=20){\n    lines.push(<line style={{transform: `translate(0, ${i}px) rotate(${angle}deg)`}} x2={barWidth*1.5} stroke={color} stroke-width=\"2\" stroke-linecap=\"square\"/>)\n  }\n  return lines\n}\n\nconst checkered = (barWidth:number, barHeight:number, color:string) =>{\n  const angle = 30;\n  const startPoint = Math.tan(degToRadian(angle))*barWidth;\n  let lines = [];\n  for(let i = -startPoint; i<barHeight; i+=10){\n    lines.push(<line style={{transform: `translate(0, ${i}px) rotate(${angle}deg)`}} x2={barWidth*1.5} stroke={color} stroke-width=\"2\" stroke-linecap=\"square\"/>)\n    lines.push(<line style={{transform: `translate(0, ${i+startPoint}px) rotate(-${angle}deg)`}} x2={barWidth*1.5} stroke={color} stroke-width=\"1\" stroke-linecap=\"square\"/>)\n  }\n  return lines\n}\n\nconst sine = (barWidth:number, barHeight:number, color:string) =>{\n  let paths = [];\n  const amp = 20;//amplitude\n  const period = 40;\n  const firstHalf =`M 0 0 Q ${period*0.25} ${amp} ${period*0.5} 0`;\n  const secondHalf =`M ${period*0.5} 0 Q ${period*0.75} ${-amp} ${period} 0`;\n  for(let i = 0; i<=barHeight+100; i+=1.5*amp){\n    for(let j = -period; j<=barWidth; j+=0.75*period){\n      paths.push(\n      <g style={{transform: `translate(${j}px, ${i+amp*0.5}px)`}}>\n        <path d={firstHalf}  fill=\"none\" stroke={color} stroke-width=\"2\"/>);\n        <path d={secondHalf}  fill=\"none\" stroke={color} stroke-width=\"2\"/>);\n      </g>\n      )\n    }\n  }\n  return paths\n}\nconst circles = (barWidth:number, barHeight:number, color:string) =>{\n  let circles = [];\n  for(let i = 0; i<=barHeight+20; i+=25){\n    for(let j = 0; j<=barWidth+20; j+=20){\n      circles.push(\n      <g style={{transform:\"translate(10px, 10px)\"}}>\n        <circle cx={j} cy={i} r={3} fill={color}/>\n        <circle cx={j} cy={i} r={10} fill=\"transparent\" stroke={color} strokeWidth={2}/>\n      </g>)\n    }\n  }\n  return circles \n}\nexport default Pattern;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport {PlotDimensions, AccessorItem, FontSettings, ColorSettings } from './types';\nimport {DataEntry} from '../types';\nimport Axis from './Axis';\nimport GridLine from './GridLine';\nimport Pattern from './Pattern';\nimport { TimeInterval } from 'd3';\n\ntype Props = {\n  data: DataEntry[],\n  legend: AccessorItem[],\n  xAccessor: (d:DataEntry)=>Date,\n  yAccessors: ((d:DataEntry)=>number)[],\n  xAxisLabel?: string,\n  yAxisLabel?: string,\n  xGridLine?: boolean,\n  yGridLine?: boolean,\n  fontSettings?: FontSettings,\n  colorSettings?: ColorSettings, \n  barGroupSpacing?: number,\n  barSpacing?: number,\n  isStacked?: boolean,\n  showValues?: boolean,\n  xScaleMarginLeft?: number,\n  xScaleMarginRight?: number,\n  plotDimensions: PlotDimensions,\n}\n\nconst BarPlot: React.FC<Props> = ({\n  isStacked=false,\n  data, xAccessor, yAccessors,\n  legend, \n  yGridLine=true, barSpacing=5, barGroupSpacing=10,\n  yAxisLabel=\"yAxisLabel\",\n  xAxisLabel=\"xAxisLabel\",\n  fontSettings,\n  colorSettings,\n  plotDimensions,\n  showValues=false,\n}) => {\n  const {valueFontSize=20, yLabelFontSize, xLabelFontSize, xTicksFontSize, yTicksFontSize} = fontSettings || {};\n  const defaultColor = \"#ddd\";\n  //@ts-ignore\n  const {\n    backgroundColor=\"#303030\",\n    valueColor=defaultColor,\n    gridLineColor=d3.rgb(defaultColor).darker(3).formatHex(),\n    xLabelColor=defaultColor,\n    yLabelColor=defaultColor,\n    xAxisColor=defaultColor,\n    yAxisColor=defaultColor\n  } = colorSettings || {};\n\n  const {width, height, boundedHeight, marginTop, marginLeft} = plotDimensions;\n\n  //get the extents of all data that will be shown and use the biggest to scale the entire visualization\n  const biggestExtentAccessor = isStacked ?\n    (d:DataEntry) => yAccessors.reduce((accum, curr) => accum+curr(d), 0)\n    :\n    yAccessors.reduce((current, next) => ((d3.extent(data, next))[1] as number)>((d3.extent(data, current))[1] as number)? next:current, yAccessors[0])\n\n  const yScale = d3\n    .scaleLinear()\n    .domain([0, (d3.extent(data, biggestExtentAccessor)[1] as number)])//toDo: make domain parameterizable [0+offsetBottom, extent+offsetTop]\n    .range([0, plotDimensions.boundedHeight])\n    .nice()\n\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(data, xAccessor) as Date[])\n    .range([100, plotDimensions.boundedWidth-100])\n    .nice()\n  \n  const interval = d3.timeYear.every(1) as TimeInterval;\n  //const entryWidth = boundedWidth/data.length;//The max width for each DataEntry. \n  //@todo ticks verbessern, momentan ist das mit dem interval sowohl hier, wie auch bei <Ticks> noetig\n  const entryWidth = xScale(xScale.ticks(interval)[1]) - xScale(xScale.ticks(interval)[0]);\n  const numberOfBarsPerGroup = yAccessors.length;\n  const barWidth = isStacked?\n    entryWidth-barGroupSpacing\n    :\n    (entryWidth-barGroupSpacing-(numberOfBarsPerGroup-1)*barSpacing)/numberOfBarsPerGroup;//split maxBarWidth evenly between the bars if there is more than one.\n  //the svg patterns had to be added to /public/index.html\n  return(\n    <div className=\"plot\">\n      <svg viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"xMinyMin meet\" style={{backgroundColor: backgroundColor , borderRadius: \"5px\"}}>\n        <g transform={`translate(${marginLeft}, ${marginTop})`}>\n          {yGridLine && <GridLine axis=\"y\" scale={yScale} plotDimensions={plotDimensions} lineColor={gridLineColor}/>}\n          {data.map((d, index)=>{\n            return(\n              <g transform={`translate(${xScale(xAccessor(d))-entryWidth*0.5}, 0)`} key={index}>\n                <g>\n                  {yAccessors.map((yAcc, barIndex) => {\n                    const topLeftCornerPosition = isStacked?\n                      yAccessors\n                        .slice(0, barIndex+1)\n                        .reduce((accum, curr) => accum + yScale(curr(d)), 0)\n                      :\n                      yScale(yAcc(d))\n                    return (\n                      <g transform={`translate(${isStacked? barGroupSpacing*0.5 : barGroupSpacing*0.5 + barIndex*barWidth+barIndex*barSpacing}, ${boundedHeight-topLeftCornerPosition})`} key={barIndex}>\n                        <defs>\n                          <clipPath id={`cut-off${index}-${barIndex}`}>\n                            <rect\n                              height={yScale(yAcc(d))}\n                              width={barWidth} rx={2}>\n                            </rect>\n                          </clipPath>\n                        </defs>\n                        <rect\n                          height={yScale(yAcc(d))}\n                          width={barWidth} rx={2}\n                          style={{ fill:legend[barIndex].color }}>\n                        </rect>\n                        <Pattern name={legend[barIndex].pattern}\n                          barWidth={barWidth}\n                          barHeight={yScale(yAcc(d))}\n                          clipPath={`url(#cut-off${index}-${barIndex})`}\n                          color={legend[barIndex].color}\n                          intensity={1}\n                        />\n                        {valueFontSize && showValues &&//show values only if not stacked\n                        <g transform={`translate(${barWidth*0.5}, -5)`}>\n                          <text fontWeight=\"bold\" fontSize={valueFontSize} textAnchor=\"middle\" style={{fill: `${valueColor}`}}>{yAcc(d)}</text>\n                        </g>\n                        }\n                      </g>\n                    )\n                    })}\n                </g>\n                <g>\n                  {yAccessors.map((yAcc, barIndex) => {\n                    const topLeftCornerPosition = isStacked?\n                      yAccessors\n                        .slice(0, barIndex+1)\n                        .reduce((accum, curr) => accum + yScale(curr(d)), 0)\n                      :\n                      yScale(yAcc(d))\n                    return (\n                      <g transform={`translate(${isStacked? barGroupSpacing*0.5 : barGroupSpacing*0.5 + barIndex*barWidth+barIndex*barSpacing}, ${boundedHeight-topLeftCornerPosition})`} key={barIndex}>\n                        {valueFontSize && showValues &&\n                        <g transform={`translate(${barWidth*0.5}, -5)`}>\n                          <text fontWeight=\"bold\" fontSize={valueFontSize} textAnchor=\"middle\" style={{fill: `${valueColor}`}}>{yAcc(d)}</text>\n                        </g>\n                        }\n                      </g>\n                    )\n                    })}\n                </g>\n              </g>\n            )\n          })}\n          <Axis axis={\"x\"} labelColor={xLabelColor} scale={xScale} plotDimensions={plotDimensions} lineColor={xAxisColor} label={xAxisLabel} labelFontSize={xLabelFontSize} ticksFontSize={xTicksFontSize}/>\n          <Axis axis={\"y\"} labelColor={yLabelColor} scale={yScale} plotDimensions={plotDimensions} lineColor={yAxisColor} label={yAxisLabel} labelFontSize={yLabelFontSize} ticksFontSize={yTicksFontSize}/>\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default BarPlot;\n","import React from 'react';\nimport Pattern from './Pattern';\nimport {AccessorItem, PlotDimensions} from './types';\n\ntype Props = {\n  items: AccessorItem[],\n  plotDimensions?: PlotDimensions,\n}\n\nconst Legend: React.FC<Props> = ({items}) =>{\n  const width = 40;\n  const height = 20;\n\n  return(\n    <div className=\"legend\" style={{marginTop: \"20px\"}}>\n    {items.map((item, index)=>(\n      <div className=\"legend-item\">\n        <div className=\"legend-rect\">\n          <svg style={{display: \"block\"}} viewBox={`0 0 ${width} ${height}`}>\n            <defs>\n              <clipPath id={`legend-cut-off${index}`}>\n                <rect\n                  height={height}\n                  width={width} rx={2}>\n                </rect>\n              </clipPath>\n            </defs>\n            <rect\n              height={height}\n              fill={item.color}\n              width={width}\n              rx={2}>\n            </rect>\n            <Pattern\n              name={items[index].pattern}\n              barWidth={width}\n              barHeight={height}\n              clipPath={`url(#legend-cut-off${index})`}\n              color={items[index].color}\n              intensity={1}\n            />\n          </svg>\n        </div>\n        <div style={{marginLeft: \"5px\"}}>{item.legendLabel}</div>\n      </div>\n    ))}\n    </div>\n  );\n}\n\nexport default Legend;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport * as d3 from 'd3';\nimport {DataEntry, PatternType} from './types';\nimport {AccessorItem, PlotDimensions} from './Plot/types';\nimport Select, { SingleValue, MultiValue } from 'react-select';\nimport { useFetch } from './useFetch';\nimport { createDimensions } from './Plot/Utils';\nimport BarPlot from './Plot/BarPlot';\nimport Legend from './Plot/Legend';\n\n//const colors = [\"#200\", \"#311\", \"#422\", \"#533\", \"#644\", \"#755\"]\n//const colors = [\"#fce70c\", \"#d4afb9\", \"#d1cfe2\", \"#9cadce\", \"#7ec4cf\", \"#daeaf6\", \"#aaa\", \"#bee5b0\"]\nconst colors = [\"#fce70c\", ...d3.schemeSet2];\nconst patterns:PatternType[] = [\"\", \"\", \"sine\", \"diagonal-lines\", \"\", \"circles\", \"checkered\", \"sine\"]\nconst dateParser = d3.timeParse(\"%Y\");\n\nconst getAvailableAccessors = (dataEntry:DataEntry):AccessorItem[] => {\n  const foundKeys= Object.keys(dataEntry).slice(3, -1)\n\n  return foundKeys.map(fKey => {\n    const newItem:AccessorItem = {\n      legendLabel: fKey,\n      accessor: (d:DataEntry) => Math.round((d[fKey] as number)/d.totalNumberOfStudents*100)\n    }\n    return newItem\n  })\n}\n\nconst plotDimensions:PlotDimensions = createDimensions(1200, 600, 180, 50, 50, 150);\n\nfunction App() {\n  const [fachrichtung, setFachrichtung] = useState(\"Elektrotechnik\");\n  const [showSettings, setShowSettings] = useState(true);\n  const [showValues, setShowValues] = useState(false);\n  const [showAsPercentage, setShowAsPercentage] = useState(true);\n  const [isStacked, setIsStacked] = useState(true);\n  const [selectedAccessors, setSelectedAccessors] = useState<AccessorItem[] | undefined>(undefined)\n  const [availableAccessors, setAvailableAccessors] = useState<AccessorItem[] | undefined>(undefined)\n  const {data, error, isLoading} = useFetch('studierende.json')\n\n  useEffect(()=>{\n    if(data){\n      const availableAcc = getAvailableAccessors(data[0]);\n      setAvailableAccessors(availableAcc)\n      setSelectedAccessors(availableAcc.filter(d=>d.legendLabel===\"FHNW\"))\n    }\n  }, [data])\n\n  const handleFachrichtungChange = (newValue: SingleValue<{value: string, label:string}>) => {\n    if(newValue===null){\n      throw \"Fachrichtung was not propperly selected\"\n    }\n    else{\n      setFachrichtung(newValue.label)\n    }\n  }\n\n  const handleShowAsPercentageChange = () => {\n    setShowAsPercentage(!showAsPercentage)\n    if(showAsPercentage){\n      //@ts-ignore\n      setAvailableAccessors(availableAccessors.map(a => Object.assign(a, {accessor: (d:DataEntry) => d[a.legendLabel]})))\n      //@ts-ignore\n      setSelectedAccessors(selectedAccessors.map(a => Object.assign(a, {accessor: (d:DataEntry) => d[a.legendLabel]})))\n    }\n    else{//show as absolute\n      //@ts-ignore\n      setAvailableAccessors(availableAccessors.map(a => Object.assign(a, {accessor: (d:DataEntry) => Math.round((d[a.legendLabel] as number)/d.totalNumberOfStudents*100)})))\n      //@ts-ignore\n      setSelectedAccessors(selectedAccessors.map(a => Object.assign(a, {accessor: (d:DataEntry) => Math.round((d[a.legendLabel] as number)/d.totalNumberOfStudents*100)})))\n    }\n  }\n\n  const handleSchoolChange = (newValues: MultiValue<{value:AccessorItem, label:string}>)=> {\n    setSelectedAccessors(newValues.map((d=>d.value)))\n  }\n\n  const handleStackedChange = () => {\n    setIsStacked(!isStacked)\n  }\n\n  const handleShowSettings = () => {\n    setShowSettings(!showSettings)\n  }\n\n  return (\n    <div className=\"App\">\n      {availableAccessors && selectedAccessors &&\n        <>\n          <div className=\"settings\">\n            <div onClick={handleShowSettings} style={{padding: \"5px\", display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-end\"}}>\n              <svg width={20} height={20}>\n                <g style={{transform: showSettings? \"rotate(90deg)\": \"\", transformOrigin: \"center\"}}> \n                  <line transform=\"translate(0, 4)\" x1={2} x2={18} strokeWidth={4} stroke=\"#ddd\" strokeLinecap=\"round\"/>\n                  <line transform=\"translate(0, 10)\"x1={2} x2={18} strokeWidth={4} stroke=\"#ddd\" strokeLinecap=\"round\"/>\n                  <line transform=\"translate(0, 16)\"x1={2} x2={18}  strokeWidth={4} stroke=\"#ddd\" strokeLinecap=\"round\"/>\n                </g>\n              </svg>\n            </div>\n            {showSettings &&\n            <div className=\"select-group\">\n              <Select\n                onChange={handleFachrichtungChange}\n                defaultValue={{value: fachrichtung, label: fachrichtung}}\n                options={Array.from(new Set((data as DataEntry[]).\n                  map(d=>d.Fachrichtung))).map(d=>({value:d, label:d}))}\n              />\n              <Select\n                onChange={handleSchoolChange}\n                defaultValue={selectedAccessors.map((d:AccessorItem) =>({value: d, label: d.legendLabel}))}\n                options={availableAccessors.map((d:AccessorItem) =>({value: d, label: d.legendLabel}))}\n                isMulti\n              />\n              <button onClick={handleStackedChange}>{isStacked? \"Balken nicht stapeln\" : \"Balken stapeln\"}</button>\n              <button onClick={handleShowAsPercentageChange}>{showAsPercentage? \"als absolute Zahlen angeben\" : \"als Marktanteile in % angeben\"}</button>\n              <button onClick={()=>setShowValues(!showValues)}>{showValues? \"Zahlen verstecken\" : \"Zahlen anzeigen\"}</button>\n            </div>\n            }\n          </div>\n          <div className=\"title\">Studierende an den Fachhochschulen</div>\n          <div className=\"subtitle\">{fachrichtung===\"alle\"? \"Alle technischen Fachrichtungen kumuliert\":`Fachrichtung ${fachrichtung}`}</div>\n          <Legend items={selectedAccessors}></Legend>\n          <BarPlot\n            plotDimensions={plotDimensions}\n            isStacked={isStacked}\n            data={(data as DataEntry[]).filter(d=>d.Fachrichtung === fachrichtung)}\n            xAccessor={(d:DataEntry): Date => {\n              const date = dateParser(d.Jahr.slice(0, 4))\n              if(date){ return date }\n              else{ throw \"could not convert date\" }\n            }}\n            yAccessors={selectedAccessors.map(item => item.accessor)}\n            yAxisLabel={showAsPercentage? \"Marktanteil (%)\" : \"Studierende\"}\n            xAxisLabel=\"Jahr\"\n            legend={selectedAccessors.map((item, index) => Object.assign(\n              item,\n              {\n                color: colors[index%colors.length],\n                pattern: patterns[index%patterns.length]\n              }\n            ))}\n            barGroupSpacing={25}\n            fontSettings={{xLabelFontSize: 30, yLabelFontSize: 30}}\n            showValues={showValues}\n          />\n          <div style={{width: \"vw\"}}>\n            <a style={{ marginTop: \"20px\", color: \"#1cb2f5\"}} href=\"https://www.bfs.admin.ch/bfs/de/home/statistiken/kataloge-datenbanken/daten.assetdetail.16324913.html\">Quelle: https://www.bfs.admin.ch/bfs/de/home/statistiken/kataloge-datenbanken/daten.assetdetail.16324913.html</a>\n          </div>\n        </>\n      }\n    </div>\n  );\n}\n//data={Array.from(new Set((data as DataEntry[]).map(d=>d.Jahr)))\n//  .map(year => (data as DataEntry[])\n//    .filter(d=>d.Jahr===year)\n//    .reduce((acc, curr) => Object.assign(acc, Object.fromEntries(Object.keys(curr).slice(3, -1).map(key=>[key, (curr[key] as number) + (acc[key] as number)]))), Object.assign({}, {Jahr: year, Fachrichtung: \"alle\", Geschlecht: 'Mann+Frau', \n//      \"BFH\": 0,\n//      \"HES-SO\": 0,\n//      \"FHNW\": 0,\n//      \"FHZ\": 0,\n//      \"SUPSI\": 0,\n//      \"FHO\": 0,\n//      \"OST\": 0,\n//      \"ZHAW\": 0,\n//      \"totalNumberOfStudents\": 0,\n//    }) as DataEntry)\n//  ).map(d=>Object.assign(d, {totalNumberOfStudents: Object.keys(d).slice(3, -1).reduce((acc, curr)=>acc+(d[curr] as number), 0)}))\n//}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}